
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_240253890-240366857/bears_INRIA-spoon_240253890-240366857/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java /tmp/fixed/bears_INRIA-spoon_240253890-240366857/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
--- /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_240253890-240366857/bears_INRIA-spoon_240253890-240366857/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java	2022-05-20 00:40:41.568051754 +0800
+++ /tmp/fixed/bears_INRIA-spoon_240253890-240366857/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java	2022-05-20 00:41:16.577201231 +0800
@@ -86,10 +86,8 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.TreeMap;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -102,7 +100,7 @@
 
 	// Allow to detect circular references and to avoid endless recursivity
 	// when resolving parameterizedTypes (e.g. Enum<E extends Enum<E>>)
-	private Set<TypeBinding> exploringParameterizedBindings = new HashSet<>();
+	private Map<TypeBinding, CtTypeReference> exploringParameterizedBindings = new HashMap<>();
 	private Map<String, CtTypeReference<?>> basestypes = new TreeMap<>();
 
 	private boolean bounds = false;
@@ -654,11 +652,16 @@
 					if (bindingCache.containsKey(b)) {
 						ref.addActualTypeArgument(getCtCircularTypeReference(b));
 					} else {
-						if (!this.exploringParameterizedBindings.contains(b)) {
-							this.exploringParameterizedBindings.add(b);
-							ref.addActualTypeArgument(getTypeReference(b));
+						if (!this.exploringParameterizedBindings.containsKey(b)) {
+							this.exploringParameterizedBindings.put(b, null);
+							CtTypeReference typeRefB = getTypeReference(b);
+							this.exploringParameterizedBindings.put(b, typeRefB);
+							ref.addActualTypeArgument(typeRefB);
 						} else {
-							this.exploringParameterizedBindings.remove(b);
+							CtTypeReference typeRefB = this.exploringParameterizedBindings.get(b);
+							if (typeRefB != null) {
+								ref.addActualTypeArgument(typeRefB.clone());
+							}
 						}
 					}
 				}


                
                ====================== dynamoth_1 INRIA-spoon_240253890-240366857 ================================
                
                --- a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
+++ b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
@@ -721,3 +721,5 @@
bounds = oldBounds;
-					return getTypeReference(((CaptureBinding) b).wildcard);
+					if (false) {
+						return getTypeReference(((CaptureBinding) b).wildcard);
+					}
} else if (b.superclass != null && b.firstBound == b.superclass) {




                
                ====================== dynamoth_2 INRIA-spoon_240253890-240366857 ================================
                
                --- a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
+++ b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
@@ -721,3 +721,5 @@
bounds = oldBounds;
-					return getTypeReference(((CaptureBinding) b).wildcard);
+					if (false) {
+						return getTypeReference(((CaptureBinding) b).wildcard);
+					}
} else if (b.superclass != null && b.firstBound == b.superclass) {




                
                ====================== dynamoth_3 INRIA-spoon_240253890-240366857 ================================
                
                --- a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
+++ b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java
@@ -721,3 +721,5 @@
bounds = oldBounds;
-					return getTypeReference(((CaptureBinding) b).wildcard);
+					if (false) {
+						return getTypeReference(((CaptureBinding) b).wildcard);
+					}
} else if (b.superclass != null && b.firstBound == b.superclass) {




                