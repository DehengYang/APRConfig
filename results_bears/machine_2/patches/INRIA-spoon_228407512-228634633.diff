
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_228407512-228634633/bears_INRIA-spoon_228407512-228634633/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java /tmp/fixed/bears_INRIA-spoon_228407512-228634633/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java
--- /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_228407512-228634633/bears_INRIA-spoon_228407512-228634633/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java	2022-05-20 15:47:22.583633527 +0800
+++ /tmp/fixed/bears_INRIA-spoon_228407512-228634633/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java	2022-05-20 15:47:41.624238299 +0800
@@ -19,9 +19,11 @@
 import spoon.SpoonException;
 import spoon.reflect.declaration.CtElement;
 import spoon.reflect.declaration.CtFormalTypeDeclarer;
+import spoon.reflect.declaration.CtMethod;
 import spoon.reflect.declaration.CtType;
 import spoon.reflect.declaration.CtTypeParameter;
 import spoon.reflect.reference.CtActualTypeContainer;
+import spoon.reflect.reference.CtExecutableReference;
 import spoon.reflect.reference.CtIntersectionTypeReference;
 import spoon.reflect.reference.CtTypeParameterReference;
 import spoon.reflect.reference.CtTypeReference;
@@ -173,15 +175,28 @@
 			return null;
 		}
 
+		CtElement e = this;
+		CtElement parent = getParent();
+		if (parent instanceof CtExecutableReference) {
+			CtElement parent2 = parent.getParent();
+			if (parent2 instanceof CtMethod) {
+				e = parent2;
+			} else {
+				e = ((CtExecutableReference<?>) parent).getDeclaringType().getTypeDeclaration();
+			}
+		} else {
+			e = e.getParent(CtFormalTypeDeclarer.class);
+		}
+
 		// case #1: we're a type of a method parameter, a local variable, ...
 		// the strategy is to look in the parents
 		// collecting all formal type declarers of the hierarchy
-		CtElement e = this;
-		while ((e = e.getParent(CtFormalTypeDeclarer.class)) != null) {
+		while (e != null) {
 			CtTypeParameter result = findTypeParamDeclaration((CtFormalTypeDeclarer) e, this.getSimpleName());
 			if (result != null) {
 				return result;
 			}
+			e = e.getParent(CtFormalTypeDeclarer.class);
 		}
 		return null;
 	}


                
                ====================== dynamoth_2 INRIA-spoon_228407512-228634633 ================================
                
                --- a/src/main/java/spoon/support/reflect/reference/CtExecutableReferenceImpl.java
+++ b/src/main/java/spoon/support/reflect/reference/CtExecutableReferenceImpl.java
@@ -316,4 +316,6 @@
for (int i = 0; i < parameters.size(); i++) {
-				if (m.getParameterTypes()[i] != parameters.get(i).getActualClass()) {
-					continue method_loop;
+				if (this.stat) {
+					if (m.getParameterTypes()[i] != parameters.get(i).getActualClass()) {
+						continue method_loop;
+					}
}




                
                ====================== dynamoth_3 INRIA-spoon_228407512-228634633 ================================
                
                --- a/src/main/java/spoon/support/reflect/reference/CtExecutableReferenceImpl.java
+++ b/src/main/java/spoon/support/reflect/reference/CtExecutableReferenceImpl.java
@@ -316,4 +316,6 @@
for (int i = 0; i < parameters.size(); i++) {
-				if (m.getParameterTypes()[i] != parameters.get(i).getActualClass()) {
-					continue method_loop;
+				if (this.stat) {
+					if (m.getParameterTypes()[i] != parameters.get(i).getActualClass()) {
+						continue method_loop;
+					}
}




                