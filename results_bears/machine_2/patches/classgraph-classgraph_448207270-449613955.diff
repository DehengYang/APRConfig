
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_classgraph-classgraph_448207270-449613955/bears_classgraph-classgraph_448207270-449613955/src/main/java/io/github/classgraph/ClassGraph.java /tmp/fixed/bears_classgraph-classgraph_448207270-449613955/src/main/java/io/github/classgraph/ClassGraph.java
--- /mnt/data/bias_validation_2021/results_bears/bears_classgraph-classgraph_448207270-449613955/bears_classgraph-classgraph_448207270-449613955/src/main/java/io/github/classgraph/ClassGraph.java	2022-05-19 22:24:37.106252796 +0800
+++ /tmp/fixed/bears_classgraph-classgraph_448207270-449613955/src/main/java/io/github/classgraph/ClassGraph.java	2022-05-19 22:24:51.778707421 +0800
@@ -862,7 +862,7 @@
         if (jarLeafNames.length == 0) {
             // Blacklist all lib or ext jars
             for (final String libOrExtJar : JarUtils.getJreLibOrExtJars()) {
-                blacklistLibOrExtJars(libOrExtJar);
+                blacklistLibOrExtJars(JarUtils.leafName(libOrExtJar));
             }
         } else {
             for (final String jarLeafName : jarLeafNames) {


                
                ====================== dynamoth_1 classgraph-classgraph_448207270-449613955 ================================
                
                --- a/src/main/java/io/github/classgraph/ClassGraph.java
+++ b/src/main/java/io/github/classgraph/ClassGraph.java
@@ -861,47 +861,49 @@
public ClassGraph blacklistLibOrExtJars(final String... jarLeafNames) {
-        if (jarLeafNames.length == 0) {
-            // Blacklist all lib or ext jars
-            for (final String libOrExtJar : JarUtils.getJreLibOrExtJars()) {
-                blacklistLibOrExtJars(libOrExtJar);
-            }
-        } else {
-            for (final String jarLeafName : jarLeafNames) {
-                final String leafName = JarUtils.leafName(jarLeafName);
-                if (!leafName.equals(jarLeafName)) {
-                    throw new IllegalArgumentException("Can only blacklist jars by leafname: " + jarLeafName);
+        if (false) {
+            if (jarLeafNames.length == 0) {
+                // Blacklist all lib or ext jars
+                for (final String libOrExtJar : JarUtils.getJreLibOrExtJars()) {
+                    blacklistLibOrExtJars(libOrExtJar);
}
-                if (jarLeafName.contains("*")) {
-                    // Compare wildcarded pattern against all jars in lib and ext dirs
-                    final Pattern pattern = WhiteBlackList.globToPattern(jarLeafName);
-                    boolean found = false;
-                    for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
-                        final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
-                        if (pattern.matcher(libOrExtJarLeafName).matches()) {
-                            // Check for "*" in filename to prevent infinite recursion (shouldn't happen)
-                            if (!libOrExtJarLeafName.contains("*")) {
-                                blacklistLibOrExtJars(libOrExtJarLeafName);
+            } else {
+                for (final String jarLeafName : jarLeafNames) {
+                    final String leafName = JarUtils.leafName(jarLeafName);
+                    if (!leafName.equals(jarLeafName)) {
+                        throw new IllegalArgumentException("Can only blacklist jars by leafname: " + jarLeafName);
+                    }
+                    if (jarLeafName.contains("*")) {
+                        // Compare wildcarded pattern against all jars in lib and ext dirs
+                        final Pattern pattern = WhiteBlackList.globToPattern(jarLeafName);
+                        boolean found = false;
+                        for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
+                            final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
+                            if (pattern.matcher(libOrExtJarLeafName).matches()) {
+                                // Check for "*" in filename to prevent infinite recursion (shouldn't happen)
+                                if (!libOrExtJarLeafName.contains("*")) {
+                                    blacklistLibOrExtJars(libOrExtJarLeafName);
+                                }
+                                found = true;
}
-                            found = true;
}
-                    }
-                    if (!found && topLevelLog != null) {
-                        topLevelLog.log("Could not find lib or ext jar matching wildcard: " + jarLeafName);
-                    }
-                } else {
-                    // No wildcards, just blacklist the named jar, if present
-                    boolean found = false;
-                    for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
-                        final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
-                        if (jarLeafName.equals(libOrExtJarLeafName)) {
-                            scanSpec.libOrExtJarWhiteBlackList.addToBlacklist(jarLeafName);
-                            if (topLevelLog != null) {
-                                topLevelLog.log("Blacklisting lib or ext jar: " + libOrExtJarPath);
+                        if (!found && topLevelLog != null) {
+                            topLevelLog.log("Could not find lib or ext jar matching wildcard: " + jarLeafName);
+                        }
+                    } else {
+                        // No wildcards, just blacklist the named jar, if present
+                        boolean found = false;
+                        for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
+                            final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
+                            if (jarLeafName.equals(libOrExtJarLeafName)) {
+                                scanSpec.libOrExtJarWhiteBlackList.addToBlacklist(jarLeafName);
+                                if (topLevelLog != null) {
+                                    topLevelLog.log("Blacklisting lib or ext jar: " + libOrExtJarPath);
+                                }
+                                found = true;
+                                break;
}
-                            found = true;
-                            break;
}
+                        if (!found && topLevelLog != null) {
+                            topLevelLog.log("Could not find lib or ext jar: " + jarLeafName);
+                        }
}
-                    if (!found && topLevelLog != null) {
-                        topLevelLog.log("Could not find lib or ext jar: " + jarLeafName);
-                    }
}




                
                ====================== dynamoth_2 classgraph-classgraph_448207270-449613955 ================================
                
                --- a/src/main/java/io/github/classgraph/ClassGraph.java
+++ b/src/main/java/io/github/classgraph/ClassGraph.java
@@ -861,47 +861,49 @@
public ClassGraph blacklistLibOrExtJars(final String... jarLeafNames) {
-        if (jarLeafNames.length == 0) {
-            // Blacklist all lib or ext jars
-            for (final String libOrExtJar : JarUtils.getJreLibOrExtJars()) {
-                blacklistLibOrExtJars(libOrExtJar);
-            }
-        } else {
-            for (final String jarLeafName : jarLeafNames) {
-                final String leafName = JarUtils.leafName(jarLeafName);
-                if (!leafName.equals(jarLeafName)) {
-                    throw new IllegalArgumentException("Can only blacklist jars by leafname: " + jarLeafName);
+        if (false) {
+            if (jarLeafNames.length == 0) {
+                // Blacklist all lib or ext jars
+                for (final String libOrExtJar : JarUtils.getJreLibOrExtJars()) {
+                    blacklistLibOrExtJars(libOrExtJar);
}
-                if (jarLeafName.contains("*")) {
-                    // Compare wildcarded pattern against all jars in lib and ext dirs
-                    final Pattern pattern = WhiteBlackList.globToPattern(jarLeafName);
-                    boolean found = false;
-                    for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
-                        final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
-                        if (pattern.matcher(libOrExtJarLeafName).matches()) {
-                            // Check for "*" in filename to prevent infinite recursion (shouldn't happen)
-                            if (!libOrExtJarLeafName.contains("*")) {
-                                blacklistLibOrExtJars(libOrExtJarLeafName);
+            } else {
+                for (final String jarLeafName : jarLeafNames) {
+                    final String leafName = JarUtils.leafName(jarLeafName);
+                    if (!leafName.equals(jarLeafName)) {
+                        throw new IllegalArgumentException("Can only blacklist jars by leafname: " + jarLeafName);
+                    }
+                    if (jarLeafName.contains("*")) {
+                        // Compare wildcarded pattern against all jars in lib and ext dirs
+                        final Pattern pattern = WhiteBlackList.globToPattern(jarLeafName);
+                        boolean found = false;
+                        for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
+                            final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
+                            if (pattern.matcher(libOrExtJarLeafName).matches()) {
+                                // Check for "*" in filename to prevent infinite recursion (shouldn't happen)
+                                if (!libOrExtJarLeafName.contains("*")) {
+                                    blacklistLibOrExtJars(libOrExtJarLeafName);
+                                }
+                                found = true;
}
-                            found = true;
}
-                    }
-                    if (!found && topLevelLog != null) {
-                        topLevelLog.log("Could not find lib or ext jar matching wildcard: " + jarLeafName);
-                    }
-                } else {
-                    // No wildcards, just blacklist the named jar, if present
-                    boolean found = false;
-                    for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
-                        final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
-                        if (jarLeafName.equals(libOrExtJarLeafName)) {
-                            scanSpec.libOrExtJarWhiteBlackList.addToBlacklist(jarLeafName);
-                            if (topLevelLog != null) {
-                                topLevelLog.log("Blacklisting lib or ext jar: " + libOrExtJarPath);
+                        if (!found && topLevelLog != null) {
+                            topLevelLog.log("Could not find lib or ext jar matching wildcard: " + jarLeafName);
+                        }
+                    } else {
+                        // No wildcards, just blacklist the named jar, if present
+                        boolean found = false;
+                        for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
+                            final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
+                            if (jarLeafName.equals(libOrExtJarLeafName)) {
+                                scanSpec.libOrExtJarWhiteBlackList.addToBlacklist(jarLeafName);
+                                if (topLevelLog != null) {
+                                    topLevelLog.log("Blacklisting lib or ext jar: " + libOrExtJarPath);
+                                }
+                                found = true;
+                                break;
}
-                            found = true;
-                            break;
}
+                        if (!found && topLevelLog != null) {
+                            topLevelLog.log("Could not find lib or ext jar: " + jarLeafName);
+                        }
}
-                    if (!found && topLevelLog != null) {
-                        topLevelLog.log("Could not find lib or ext jar: " + jarLeafName);
-                    }
}




                
                ====================== dynamoth_3 classgraph-classgraph_448207270-449613955 ================================
                
                --- a/src/main/java/io/github/classgraph/ClassGraph.java
+++ b/src/main/java/io/github/classgraph/ClassGraph.java
@@ -861,47 +861,49 @@
public ClassGraph blacklistLibOrExtJars(final String... jarLeafNames) {
-        if (jarLeafNames.length == 0) {
-            // Blacklist all lib or ext jars
-            for (final String libOrExtJar : JarUtils.getJreLibOrExtJars()) {
-                blacklistLibOrExtJars(libOrExtJar);
-            }
-        } else {
-            for (final String jarLeafName : jarLeafNames) {
-                final String leafName = JarUtils.leafName(jarLeafName);
-                if (!leafName.equals(jarLeafName)) {
-                    throw new IllegalArgumentException("Can only blacklist jars by leafname: " + jarLeafName);
+        if (false) {
+            if (jarLeafNames.length == 0) {
+                // Blacklist all lib or ext jars
+                for (final String libOrExtJar : JarUtils.getJreLibOrExtJars()) {
+                    blacklistLibOrExtJars(libOrExtJar);
}
-                if (jarLeafName.contains("*")) {
-                    // Compare wildcarded pattern against all jars in lib and ext dirs
-                    final Pattern pattern = WhiteBlackList.globToPattern(jarLeafName);
-                    boolean found = false;
-                    for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
-                        final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
-                        if (pattern.matcher(libOrExtJarLeafName).matches()) {
-                            // Check for "*" in filename to prevent infinite recursion (shouldn't happen)
-                            if (!libOrExtJarLeafName.contains("*")) {
-                                blacklistLibOrExtJars(libOrExtJarLeafName);
+            } else {
+                for (final String jarLeafName : jarLeafNames) {
+                    final String leafName = JarUtils.leafName(jarLeafName);
+                    if (!leafName.equals(jarLeafName)) {
+                        throw new IllegalArgumentException("Can only blacklist jars by leafname: " + jarLeafName);
+                    }
+                    if (jarLeafName.contains("*")) {
+                        // Compare wildcarded pattern against all jars in lib and ext dirs
+                        final Pattern pattern = WhiteBlackList.globToPattern(jarLeafName);
+                        boolean found = false;
+                        for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
+                            final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
+                            if (pattern.matcher(libOrExtJarLeafName).matches()) {
+                                // Check for "*" in filename to prevent infinite recursion (shouldn't happen)
+                                if (!libOrExtJarLeafName.contains("*")) {
+                                    blacklistLibOrExtJars(libOrExtJarLeafName);
+                                }
+                                found = true;
}
-                            found = true;
}
-                    }
-                    if (!found && topLevelLog != null) {
-                        topLevelLog.log("Could not find lib or ext jar matching wildcard: " + jarLeafName);
-                    }
-                } else {
-                    // No wildcards, just blacklist the named jar, if present
-                    boolean found = false;
-                    for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
-                        final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
-                        if (jarLeafName.equals(libOrExtJarLeafName)) {
-                            scanSpec.libOrExtJarWhiteBlackList.addToBlacklist(jarLeafName);
-                            if (topLevelLog != null) {
-                                topLevelLog.log("Blacklisting lib or ext jar: " + libOrExtJarPath);
+                        if (!found && topLevelLog != null) {
+                            topLevelLog.log("Could not find lib or ext jar matching wildcard: " + jarLeafName);
+                        }
+                    } else {
+                        // No wildcards, just blacklist the named jar, if present
+                        boolean found = false;
+                        for (final String libOrExtJarPath : JarUtils.getJreLibOrExtJars()) {
+                            final String libOrExtJarLeafName = JarUtils.leafName(libOrExtJarPath);
+                            if (jarLeafName.equals(libOrExtJarLeafName)) {
+                                scanSpec.libOrExtJarWhiteBlackList.addToBlacklist(jarLeafName);
+                                if (topLevelLog != null) {
+                                    topLevelLog.log("Blacklisting lib or ext jar: " + libOrExtJarPath);
+                                }
+                                found = true;
+                                break;
}
-                            found = true;
-                            break;
}
+                        if (!found && topLevelLog != null) {
+                            topLevelLog.log("Could not find lib or ext jar: " + jarLeafName);
+                        }
}
-                    if (!found && topLevelLog != null) {
-                        topLevelLog.log("Could not find lib or ext jar: " + jarLeafName);
-                    }
}




                