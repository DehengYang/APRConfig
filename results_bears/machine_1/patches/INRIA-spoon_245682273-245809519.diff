
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_245682273-245809519/bears_INRIA-spoon_245682273-245809519/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java /tmp/fixed/bears_INRIA-spoon_245682273-245809519/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java
--- /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_245682273-245809519/bears_INRIA-spoon_245682273-245809519/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java	2022-04-22 00:47:20.152343534 +0800
+++ /tmp/fixed/bears_INRIA-spoon_245682273-245809519/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java	2022-04-22 00:48:04.078309059 +0800
@@ -1099,14 +1099,16 @@
 		} else {
 			// It's a method invocation
 			printer.snapshotLength();
-			try (Writable _context = context.modify()) {
-				if (invocation.getTarget() instanceof CtTypeAccess) {
-					_context.ignoreGenerics(true);
+			if (!this.importsContext.isImported(invocation.getExecutable())) {
+				try (Writable _context = context.modify()) {
+					if (invocation.getTarget() instanceof CtTypeAccess) {
+						_context.ignoreGenerics(true);
+					}
+					scan(invocation.getTarget());
+				}
+				if (printer.hasNewContent()) {
+					printer.write(".");
 				}
-				scan(invocation.getTarget());
-			}
-			if (printer.hasNewContent()) {
-				printer.write(".");
 			}
 
 			elementPrinterHelper.writeActualTypeArguments(invocation);
diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_245682273-245809519/bears_INRIA-spoon_245682273-245809519/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java /tmp/fixed/bears_INRIA-spoon_245682273-245809519/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java
--- /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_245682273-245809519/bears_INRIA-spoon_245682273-245809519/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java	2022-04-22 00:47:20.152343534 +0800
+++ /tmp/fixed/bears_INRIA-spoon_245682273-245809519/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java	2022-04-22 00:48:04.078309059 +0800
@@ -367,11 +367,19 @@
 	 */
 	private boolean declaringTypeIsLocalOrImported(CtTypeReference declaringType) {
 		if (declaringType != null) {
-			if (!isTypeInCollision(declaringType, false) && addClassImport(declaringType)) {
-				return true;
+
+			boolean isInCollision = isTypeInCollision(declaringType, false);
+			if (!isInCollision) {
+				boolean importSuccess = addClassImport(declaringType);
+				if (importSuccess) {
+					return true;
+				}
 			}
 
-			if (isImportedInClassImports(declaringType) || classNamePresentInJavaLang(declaringType)) {
+			boolean importedInClassImports = isImportedInClassImports(declaringType);
+			boolean inJavaLang = classNamePresentInJavaLang(declaringType);
+
+			if (importedInClassImports || inJavaLang) {
 				return true;
 			}
 
@@ -386,7 +394,29 @@
 		return false;
 	}
 
+	/**
+	 * Test if the given executable reference is targeted a method name which is in collision with a method name of the current class
+	 * @param ref
+	 * @return
+	 */
+	private boolean isInCollisionWithLocalMethod(CtExecutableReference ref) {
+		CtType<?> typeDecl = ref.getParent(CtType.class);
+
+		String methodName = ref.getSimpleName();
+
+		for (CtMethod<?> method : typeDecl.getAllMethods()) {
+			if (method.getSimpleName().equals(methodName)) {
+				return true;
+			}
+		}
+		return false;
+	}
+
 	protected boolean addMethodImport(CtExecutableReference ref) {
+		// static import is not supported below java 1.5
+		if (ref.getFactory().getEnvironment().getComplianceLevel() < 5) {
+			return false;
+		}
 		if (this.methodImports.containsKey(ref.getSimpleName())) {
 			return isImportedInMethodImports(ref);
 		}
@@ -396,6 +426,10 @@
 			return false;
 		}
 
+		if (this.isInCollisionWithLocalMethod(ref)) {
+			return false;
+		}
+
 		methodImports.put(ref.getSimpleName(), ref);
 
 		// if we are in the same package than target type, we also import class to avoid FQN in FQN mode.
@@ -420,6 +454,10 @@
 	}
 
 	protected boolean addFieldImport(CtFieldReference ref) {
+		// static import is not supported below java 1.5
+		if (ref.getFactory().getEnvironment().getComplianceLevel() < 5) {
+			return false;
+		}
 		if (this.fieldImports.containsKey(ref.getSimpleName())) {
 			return isImportedInFieldImports(ref);
 		}


                
                ====================== simfix_2 INRIA-spoon_245682273-245809519 ================================
                
                [PATCH 1024] file: /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_245682273-245809519/bears_INRIA-spoon_245682273-245809519/src/main/java//spoon/support/visitor/java/JavaReflectionTreeBuilder.java, range: <234,237>, original: super.visitAnnotation(annotation);
exit();
contexts.peek().addAnnotation(ctAnnotation);
, patch: System.exit(-1);
super.visitAnnotation(annotation);
exit();
contexts.peek().addAnnotation(ctAnnotation);


                