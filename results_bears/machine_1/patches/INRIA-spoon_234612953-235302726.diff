
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_234612953-235302726/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java /tmp/fixed/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java
--- /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_234612953-235302726/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java	2022-04-29 21:10:41.656122615 +0800
+++ /tmp/fixed/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java	2022-04-29 21:11:03.853115998 +0800
@@ -22,6 +22,7 @@
 import spoon.reflect.code.CtFieldRead;
 import spoon.reflect.code.CtFieldWrite;
 import spoon.reflect.code.CtInvocation;
+import spoon.reflect.code.CtLiteral;
 import spoon.reflect.declaration.CtAnnotationType;
 import spoon.reflect.declaration.CtClass;
 import spoon.reflect.declaration.CtElement;
@@ -54,6 +55,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.StringTokenizer;
 import java.util.TreeMap;
 
 /**
@@ -100,10 +102,9 @@
 	@Override
 	public <T> void visitCtFieldReference(CtFieldReference<T> reference) {
 		enter(reference);
+		scan(reference.getDeclaringType());
 		if (reference.isStatic()) {
-			if (!addFieldImport(reference)) {
-				scan(reference.getDeclaringType());
-			}
+			addFieldImport(reference);
 		} else {
 			scan(reference.getDeclaringType());
 		}
@@ -137,10 +138,15 @@
 	@Override
 	public <T> void visitCtTypeReference(CtTypeReference<T> reference) {
 		if (!(reference instanceof CtArrayTypeReference)) {
+			CtTypeReference typeReference;
 			if (reference.getDeclaringType() == null) {
-				addClassImport(reference);
+				typeReference = reference;
 			} else {
-				addClassImport(reference.getAccessType());
+				typeReference = reference.getAccessType();
+			}
+
+			if (!this.isTypeInCollision(typeReference, false)) {
+				this.addClassImport(typeReference);
 			}
 		}
 		super.visitCtTypeReference(reference);
@@ -277,14 +283,7 @@
 		if (ref.getPackage() == null || ref.getPackage().isUnnamedPackage()) {
 			return false;
 		}
-		if (ref.getPackage().getSimpleName().equals("java.lang")) {
-			if (classNamePresentInJavaLang(ref)) {
-				// Don't import class with names clashing with some classes present in java.lang,
-				// because it leads to undecidability and compilation errors. I. e. always leave
-				// com.mycompany.String fully-qualified.
-				return false;
-			}
-		}
+
 		if (targetType != null && targetType.canAccess(ref) == false) {
 			//ref type is not visible in targetType we must not add import for it, java compiler would fail on that.
 			return false;
@@ -560,7 +559,6 @@
 
 	/**
 	 * Test if the reference can be imported, i.e. test if the importation could lead to a collision.
-	 * In FQN mode, it only tests the first package name: if a collision occurs with this first one, it should be imported.
 	 * @param ref
 	 * @return true if the ref should be imported.
 	 */
@@ -577,6 +575,12 @@
 				parent = ref;
 			}
 
+			// in that case we are trying to import a type because of a literal we are scanning
+			// i.e. a string, an int, etc.
+			if (parent instanceof CtLiteral) {
+				return false;
+			}
+
 			Set<String> localVariablesOfBlock = new HashSet<>();
 
 			if (parent instanceof CtField) {
@@ -588,8 +592,13 @@
 			}
 
 			while (!(parent instanceof CtPackage)) {
-				if ((parent instanceof CtFieldReference) || (parent instanceof CtExecutableReference)) {
-					CtReference parentType = (CtReference) parent;
+				if ((parent instanceof CtFieldReference) || (parent instanceof CtExecutableReference) || (parent instanceof CtInvocation)) {
+					CtReference parentType;
+					if (parent instanceof CtInvocation) {
+						parentType = ((CtInvocation) parent).getExecutable();
+					} else {
+						parentType = (CtReference) parent;
+					}
 					LinkedList<String> qualifiedNameTokens = new LinkedList<>();
 
 					// we don't want to test the current ref name, as we risk to create field import and make autoreference
@@ -600,39 +609,54 @@
 					CtTypeReference typeReference;
 					if (parent instanceof CtFieldReference) {
 						typeReference = ((CtFieldReference) parent).getDeclaringType();
-					} else {
+					} else if (parent instanceof CtExecutableReference) {
 						typeReference = ((CtExecutableReference) parent).getDeclaringType();
+					} else {
+						typeReference = ((CtInvocation) parent).getExecutable().getDeclaringType();
 					}
 
 					if (typeReference != null) {
-						qualifiedNameTokens.add(typeReference.getSimpleName());
+						qualifiedNameTokens.addFirst(typeReference.getSimpleName());
 
 						if (typeReference.getPackage() != null) {
-							CtPackage ctPackage = typeReference.getPackage().getDeclaration();
-
-							while (ctPackage != null) {
-								qualifiedNameTokens.add(ctPackage.getSimpleName());
-
-								CtElement packParent = ctPackage.getParent();
-								if (packParent.getParent() != null && !((CtPackage) packParent).getSimpleName().equals(CtPackage.TOP_LEVEL_PACKAGE_NAME)) {
-									ctPackage = (CtPackage) packParent;
-								} else {
-									ctPackage = null;
-								}
+							StringTokenizer token = new StringTokenizer(typeReference.getPackage().getSimpleName(), CtPackage.PACKAGE_SEPARATOR);
+							int index = 0;
+							while (token.hasMoreElements()) {
+								qualifiedNameTokens.add(index, token.nextToken());
+								index++;
 							}
 						}
 					}
 					if (!qualifiedNameTokens.isEmpty()) {
 						// qualified name token are ordered in the reverse order
 						// if the first package name is a variable name somewhere, it could lead to a collision
-						if (fieldAndMethodsNames.contains(qualifiedNameTokens.getLast()) || localVariablesOfBlock.contains(qualifiedNameTokens.getLast())) {
-							qualifiedNameTokens.removeLast();
+						if (fieldAndMethodsNames.contains(qualifiedNameTokens.getFirst()) || localVariablesOfBlock.contains(qualifiedNameTokens.getFirst())) {
+							qualifiedNameTokens.removeFirst();
 
 							if (fqnMode) {
-								return true;
+								// in case we are testing a type: we should not import it if its entire name is in collision
+								// for example: spoon.Launcher if a field spoon and another one Launcher exists
+								if (ref instanceof CtTypeReference) {
+									if (qualifiedNameTokens.isEmpty()) {
+										return true;
+									}
+									// but if the other package names are not a variable name, it's ok to import
+									for (int i =  0; i < qualifiedNameTokens.size(); i++) {
+										String testedToken = qualifiedNameTokens.get(i);
+										if (!fieldAndMethodsNames.contains(testedToken) && !localVariablesOfBlock.contains(testedToken)) {
+											return true;
+										}
+									}
+									return false;
+
+								// However if it is a static method/field, we always accept to import them in this case
+								// It is the last possibility for managing import for us
+								} else {
+									return true;
+								}
 							} else {
 								// but if the other package names are not a variable name, it's ok to import
-								for (int i = qualifiedNameTokens.size() - 1; i > 0; i--) {
+								for (int i =  0; i < qualifiedNameTokens.size(); i++) {
 									String testedToken = qualifiedNameTokens.get(i);
 									if (!fieldAndMethodsNames.contains(testedToken) && !localVariablesOfBlock.contains(testedToken)) {
 										return false;
diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_234612953-235302726/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/MinimalImportScanner.java /tmp/fixed/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/MinimalImportScanner.java
--- /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_234612953-235302726/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/MinimalImportScanner.java	2022-04-29 21:10:41.656122615 +0800
+++ /tmp/fixed/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/MinimalImportScanner.java	2022-04-29 21:11:03.853115998 +0800
@@ -29,7 +29,8 @@
 
 	/**
 	 * This method use @link{ImportScannerImpl#isTypeInCollision} to import a ref only if there is a collision
-	 * @param ref
+	 * @param ref: the type we are testing, it can be a CtTypeReference, a CtFieldReference or a CtExecutableReference
+	 *
 	 * @return true if the ref should be imported.
 	 */
 	private boolean shouldTypeBeImported(CtReference ref) {
@@ -54,6 +55,12 @@
 
 	@Override
 	protected boolean addFieldImport(CtFieldReference ref) {
+		if (ref.getDeclaringType() != null) {
+			if (isImportedInClassImports(ref.getDeclaringType())) {
+				return false;
+			}
+		}
+
 		boolean shouldTypeBeImported = this.shouldTypeBeImported(ref);
 
 		if (shouldTypeBeImported) {
@@ -70,6 +77,11 @@
 
 	@Override
 	protected boolean addMethodImport(CtExecutableReference ref) {
+		if (ref.getDeclaringType() != null) {
+			if (isImportedInClassImports(ref.getDeclaringType())) {
+				return false;
+			}
+		}
 		boolean shouldTypeBeImported = this.shouldTypeBeImported(ref);
 
 		if (shouldTypeBeImported) {
diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_234612953-235302726/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java /tmp/fixed/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java
--- /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_234612953-235302726/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java	2022-04-29 21:10:41.656122615 +0800
+++ /tmp/fixed/bears_INRIA-spoon_234612953-235302726/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java	2022-04-29 21:11:03.853115998 +0800
@@ -283,7 +283,7 @@
 					importTypeStr = this.removeInnerTypeSeparator(fieldRef.getDeclaringType().getQualifiedName()) + "." + fieldRef.getSimpleName();
 				}
 
-				if (!importTypeStr.equals("")) {
+				if (!importTypeStr.equals("") && !importTypeStr.startsWith("java.lang")) {
 					printer.write(importStr + " " + importTypeStr + ";").writeln().writeTabs();
 				}
 			}


                
                ====================== simfix_2 INRIA-spoon_234612953-235302726 ================================
                
                [PATCH 3195] file: /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_234612953-235302726/bears_INRIA-spoon_234612953-235302726/src/main/java//spoon/support/visitor/java/JavaReflectionTreeBuilder.java, range: <398,401>, original: super.visitArrayReference(typeArray);
exit();
contexts.peek().addArrayReference(arrayTypeReference);
, patch: System.exit(-1);
super.visitArrayReference(typeArray);
exit();
contexts.peek().addArrayReference(arrayTypeReference);


                