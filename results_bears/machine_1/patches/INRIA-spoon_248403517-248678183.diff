
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_248403517-248678183/bears_INRIA-spoon_248403517-248678183/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java /tmp/fixed/bears_INRIA-spoon_248403517-248678183/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java
--- /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_248403517-248678183/bears_INRIA-spoon_248403517-248678183/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java	2022-04-23 19:18:54.664270740 +0800
+++ /tmp/fixed/bears_INRIA-spoon_248403517-248678183/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java	2022-04-23 19:19:46.170573888 +0800
@@ -16,6 +16,7 @@
  */
 package spoon.reflect.visitor;
 
+import spoon.SpoonException;
 import spoon.compiler.Environment;
 import spoon.reflect.code.CtAnnotationFieldAccess;
 import spoon.reflect.code.CtArrayAccess;
@@ -67,6 +68,7 @@
 import spoon.reflect.code.CtTryWithResource;
 import spoon.reflect.code.CtTypeAccess;
 import spoon.reflect.code.CtUnaryOperator;
+import spoon.reflect.code.CtVariableAccess;
 import spoon.reflect.code.CtVariableRead;
 import spoon.reflect.code.CtVariableWrite;
 import spoon.reflect.code.CtWhile;
@@ -292,12 +294,46 @@
 					printer.adjustStartPosition(e);
 				}
 			}
-			e.accept(this);
+			try {
+				e.accept(this);
+			} catch (SpoonException ex) {
+				throw ex;
+			} catch (Exception ex) {
+				String elementInfo = e.getClass().getName();
+				elementInfo += " on path " + getPath(e) + "\n";
+				if (e.getPosition() != null) {
+					elementInfo += "at position " + e.getPosition().toString() + " ";
+				}
+				throw new SpoonException("Printing of " + elementInfo + "failed", ex);
+			}
 			context.elementStack.pop();
 		}
 		return this;
 	}
 
+	private static String getPath(CtElement ele) {
+		StringBuilder sb = new StringBuilder();
+		addParentPath(sb, ele);
+		if (ele instanceof CtVariableAccess) {
+			sb.append(':').append(((CtVariableAccess) ele).getVariable().getSimpleName());
+		}
+		return sb.toString();
+	}
+	private static void addParentPath(StringBuilder sb, CtElement ele) {
+		if (ele == null || (ele instanceof CtPackage && ((CtPackage) ele).isUnnamedPackage())) {
+			return;
+		}
+		if (ele.isParentInitialized()) {
+			addParentPath(sb, ele.getParent());
+		}
+		sb.append("\n\t").append(ele.getClass().getSimpleName());
+		if (ele instanceof CtNamedElement) {
+			sb.append(":").append(((CtNamedElement) ele).getSimpleName());
+		} else if (ele instanceof CtReference) {
+			sb.append(":").append(((CtReference) ele).getSimpleName());
+		}
+	}
+
 	/**
 	 * The generic scan method for a reference.
 	 */


                
                ====================== simfix_2 INRIA-spoon_248403517-248678183 ================================
                
                [PATCH 1129] file: /mnt/data/bias_validation_2021/results_bears/bears_INRIA-spoon_248403517-248678183/bears_INRIA-spoon_248403517-248678183/src/main/java//spoon/Launcher.java, range: <216,220>, original: opt2.setHelp("Define tabulation size.");
jsap.registerParameter(opt2);
opt2=new FlaggedOption("level");
, patch: opt2.setDefault(OUTPUTDIR);
opt2.setHelp("Define tabulation size.");
jsap.registerParameter(opt2);
opt2=new FlaggedOption("level");


                
                ====================== tbar_2 INRIA-spoon_248403517-248678183 ================================
                
                [PATCH 2107]//**********************************************************
//spoon/Launcher.java ------ 214
//**********************************************************
===Buggy Code===
opt2.setStringParser(JSAP.INTEGER_PARSER);
			opt2.setDefault("4");
			opt2.setHelp("Define tabulation size.");
			jsap.registerParameter(opt2);

			// Level logging.
			opt2 = new FlaggedOption("level");
			opt2.setLongFlag("level");
			opt2.setHelp("Level of the ouput messages about what spoon is doing. Default value is ALL level.");
			opt2.setStringParser(JSAP.STRING_PARSER);

===Patch Code===

			opt2.setDefault("4");
			opt2.setHelp("Define tabulation size.");
			jsap.registerParameter(opt2);

			// Level logging.
			opt2 = new FlaggedOption("level");
			opt2.setLongFlag("level");
			opt2.setHelp("Level of the ouput messages about what spoon is doing. Default value is ALL level.");
			opt2.setStringParser(JSAP.STRING_PARSER);
	opt2.setStringParser(JSAP.INTEGER_PARSER);



                