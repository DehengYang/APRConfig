
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/results_bears/bears_FasterXML-jackson-databind_226666085-226673064/bears_FasterXML-jackson-databind_226666085-226673064/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java /tmp/fixed/bears_FasterXML-jackson-databind_226666085-226673064/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
--- /mnt/data/bias_validation_2021/results_bears/bears_FasterXML-jackson-databind_226666085-226673064/bears_FasterXML-jackson-databind_226666085-226673064/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java	2022-04-25 04:59:32.678027995 +0800
+++ /tmp/fixed/bears_FasterXML-jackson-databind_226666085-226673064/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java	2022-04-25 05:00:20.128149451 +0800
@@ -761,6 +761,9 @@
                         type = tf.constructGeneralizedType(type, serClass);
                     } else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well
                         type = tf.constructSpecializedType(type, serClass);
+                    } else if (_primitiveAndWrapper(currRaw, serClass)) {
+                        // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements
+                        type = type.withStaticTyping();
                     } else {
                         throw new JsonMappingException(null,
                                 String.format("Can not refine serialization type %s into %s; types not related",
@@ -793,6 +796,9 @@
                             keyType = tf.constructGeneralizedType(keyType, keyClass);
                         } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
                             keyType = tf.constructSpecializedType(keyType, keyClass);
+                        } else if (_primitiveAndWrapper(currRaw, keyClass)) {
+                            // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements
+                            keyType = keyType.withStaticTyping();
                         } else {
                             throw new JsonMappingException(null,
                                     String.format("Can not refine serialization key type %s into %s; types not related",
@@ -826,6 +832,9 @@
                            contentType = tf.constructGeneralizedType(contentType, contentClass);
                        } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
                            contentType = tf.constructSpecializedType(contentType, contentClass);
+                       } else if (_primitiveAndWrapper(currRaw, contentClass)) {
+                           // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements
+                           contentType = contentType.withStaticTyping();
                        } else {
                            throw new JsonMappingException(null,
                                    String.format("Can not refine serialization content type %s into %s; types not related",
@@ -1113,7 +1122,8 @@
         
         // Ok: start by refining the main type itself; common to all types
         final Class<?> valueClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.as());
-        if ((valueClass != null) && !type.hasRawClass(valueClass)) {
+        if ((valueClass != null) && !type.hasRawClass(valueClass)
+                && !_primitiveAndWrapper(type, valueClass)) {
             try {
                 type = tf.constructSpecializedType(type, valueClass);
             } catch (IllegalArgumentException iae) {
@@ -1129,7 +1139,8 @@
         if (type.isMapLikeType()) {
             JavaType keyType = type.getKeyType();
             final Class<?> keyClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.keyAs());
-            if (keyClass != null) {
+            if ((keyClass != null)
+                    && !_primitiveAndWrapper(keyType, keyClass)) {
                 try {
                     keyType = tf.constructSpecializedType(keyType, keyClass);
                     type = ((MapLikeType) type).withKeyType(keyType);
@@ -1145,7 +1156,8 @@
         if (contentType != null) { // collection[like], map[like], array, reference
             // And then value types for all containers:
             final Class<?> contentClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.contentAs());
-            if (contentClass != null) {
+            if ((contentClass != null)
+                    && !_primitiveAndWrapper(contentType, contentClass)) {
                 try {
                     contentType = tf.constructSpecializedType(contentType, contentClass);
                     type = type.withContentType(contentType);
@@ -1451,9 +1463,25 @@
         return StdTypeResolverBuilder.noTypeInfoBuilder();
     }
 
-    /*
-    /**********************************************************
-    /* Helper classes
-    /**********************************************************
-     */
+    private boolean _primitiveAndWrapper(Class<?> baseType, Class<?> refinement)
+    {
+        if (baseType.isPrimitive()) {
+            return baseType == ClassUtil.primitiveType(refinement);
+        }
+        if (refinement.isPrimitive()) {
+            return refinement == ClassUtil.primitiveType(baseType);
+        }
+        return false;
+    }
+
+    private boolean _primitiveAndWrapper(JavaType baseType, Class<?> refinement)
+    {
+        if (baseType.isPrimitive()) {
+            return baseType.hasRawClass(ClassUtil.primitiveType(refinement));
+        }
+        if (refinement.isPrimitive()) {
+            return refinement == ClassUtil.primitiveType(baseType.getRawClass());
+        }
+        return false;
+    }
 }


                
                ====================== simfix_3 FasterXML-jackson-databind_226666085-226673064 ================================
                
                [PATCH 480] file: /mnt/data/bias_validation_2021/results_bears/bears_FasterXML-jackson-databind_226666085-226673064/bears_FasterXML-jackson-databind_226666085-226673064/src/main/java//com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java, range: <1498,1503>, original: while(bufferParser.nextToken()!=JsonToken.END_OBJECT){
String propName=bufferParser.getCurrentName();
bufferParser.nextToken();
handleUnknownProperty(bufferParser,ctxt,bean,propName);
}
, patch: bufferParser.nextToken();
while(bufferParser.nextToken()!=JsonToken.END_OBJECT){
String propName=bufferParser.getCurrentName();
bufferParser.nextToken();
handleUnknownProperty(bufferParser,ctxt,bean,propName);
}


                