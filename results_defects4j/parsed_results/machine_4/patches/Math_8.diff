
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_8/defects4j_Math_8/defects4j_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java /tmp/fixed/defects4j_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
--- /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_8/defects4j_Math_8/defects4j_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2021-10-25 22:43:35.799166303 +0800
+++ /tmp/fixed/defects4j_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	2021-10-25 22:43:51.120486708 +0800
@@ -178,13 +178,13 @@
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
-    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
+    public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        final Object[] out = new Object[sampleSize];
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();


                
                ====================== dynamoth_1 Math_8 ================================
                
                --- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
@@ -188,4 +188,6 @@

-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
+        if (false) {
+            for (int i = 0; i < sampleSize; i++) {
+                out[i] = sample();
+            }
}




                
                ====================== dynamoth_2 Math_8 ================================
                
                --- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
@@ -188,4 +188,6 @@

-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
+        if (false) {
+            for (int i = 0; i < sampleSize; i++) {
+                out[i] = sample();
+            }
}




                
                ====================== dynamoth_3 Math_8 ================================
                
                --- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
@@ -188,4 +188,6 @@

-        for (int i = 0; i < sampleSize; i++) {
-            out[i] = sample();
+        if (false) {
+            for (int i = 0; i < sampleSize; i++) {
+                out[i] = sample();
+            }
}




                