
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Closure_18/defects4j_Closure_18/defects4j_Closure_18/src/com/google/javascript/jscomp/Compiler.java /tmp/fixed/defects4j_Closure_18/src/com/google/javascript/jscomp/Compiler.java
--- /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Closure_18/defects4j_Closure_18/defects4j_Closure_18/src/com/google/javascript/jscomp/Compiler.java	2021-09-02 23:56:42.265512371 +0800
+++ /tmp/fixed/defects4j_Closure_18/src/com/google/javascript/jscomp/Compiler.java	2021-09-02 23:57:13.374710712 +0800
@@ -1285,7 +1285,7 @@
 
       // Check if the sources need to be re-ordered.
       boolean staleInputs = false;
-      if (options.dependencyOptions.needsManagement() && options.closurePass) {
+      if (options.dependencyOptions.needsManagement()) {
         for (CompilerInput input : inputs) {
           // Forward-declare all the provided types, so that they
           // are not flagged even if they are dropped from the process.


                
                ====================== dynamoth_2 Closure_18 ================================
                
                --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (this.isAdd()) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
}




                
                ====================== dynamoth_3 Closure_18 ================================
                
                --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (this.isAdd()) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
}




                
                ====================== simfix_1 Closure_18 ================================
                
                [PATCH 5384] file: /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Closure_18/defects4j_Closure_18/defects4j_Closure_18/src//com/google/javascript/rhino/Node.java, range: <957,970>, original: if(type==Token.FUNCTION){
sb.append(' ');
if(first==null||first.getType()!=Token.NAME){
sb.append("<invalid>");
}else {
sb.append(first.getString());
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
, patch: if(type==Token.ASSIGN){
sb.append(' ');
if(first==null||first.getType()!=Token.NAME){
sb.append("<invalid>");
}else {
sb.append(first.getString());
}
}else if(type==Token.NAME){
sb.append(' ');
sb.append(getDouble());
}


                