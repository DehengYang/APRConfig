
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_78/defects4j_Math_78/defects4j_Math_78/src/main/java/org/apache/commons/math/ode/events/EventState.java /tmp/fixed/defects4j_Math_78/src/main/java/org/apache/commons/math/ode/events/EventState.java
--- /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_78/defects4j_Math_78/defects4j_Math_78/src/main/java/org/apache/commons/math/ode/events/EventState.java	2021-09-07 00:34:43.337975290 +0800
+++ /tmp/fixed/defects4j_Math_78/src/main/java/org/apache/commons/math/ode/events/EventState.java	2021-09-07 00:35:02.706471351 +0800
@@ -188,6 +188,7 @@
                 if (g0Positive ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
+                    if (ga * gb > 0) {
                         // this is a corner case:
                         // - there was an event near ta,
                         // - there is another event between ta and tb
@@ -195,7 +196,17 @@
                         // this implies that the real sign of ga is the same as gb, so we need to slightly
                         // shift ta to make sure ga and gb get opposite signs and the solver won't complain
                         // about bracketing
+                        final double epsilon = (forward ? 0.25 : -0.25) * convergence;
+                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {
+                            ta += epsilon;
+                            interpolator.setInterpolatedTime(ta);
+                            ga = handler.g(ta, interpolator.getInterpolatedState());
+                        }
+                        if (ga * gb > 0) {
                             // this should never happen
+                            throw MathRuntimeException.createInternalError(null);
+                        }
+                    }
                          
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;


                
                ====================== dynamoth_2 Math_78 ================================
                
                --- a/src/main/java/org/apache/commons/math/ode/events/EventState.java
+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java
@@ -215,3 +215,5 @@
final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    if (t1 <= this.maxIterationCount) {
+                        solver.setAbsoluteAccuracy(convergence);
+                    }
solver.setMaximalIterationCount(maxIterationCount);




                
                ====================== dynamoth_3 Math_78 ================================
                
                --- a/src/main/java/org/apache/commons/math/ode/events/EventState.java
+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java
@@ -215,3 +215,5 @@
final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    if (t1 <= this.maxIterationCount) {
+                        solver.setAbsoluteAccuracy(convergence);
+                    }
solver.setMaximalIterationCount(maxIterationCount);




                
                ====================== nopol_2 Math_78 ================================
                
                --- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -281,3 +281,5 @@
// Fall back to bisection.
-                    delta = 0.5 * dx;
+                    if (y0 < 1) {
+                        delta = 0.5 * dx;
+                    }
oldDelta = delta;




                
                ====================== nopol_3 Math_78 ================================
                
                --- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -281,3 +281,5 @@
// Fall back to bisection.
-                    delta = 0.5 * dx;
+                    if (y0 < 1) {
+                        delta = 0.5 * dx;
+                    }
oldDelta = delta;




                
                ====================== tbar_2 Math_78 ================================
                
                [PATCH 2862]//**********************************************************
//org/apache/commons/math/ode/events/EventState.java ------ 174
//**********************************************************
===Buggy Code===
final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));

===Patch Code===
final int    n  = Math.max(1, (int) Math.ceil(Math.abs(this.convergence - t0) / maxCheckInterval));


                