
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_28/defects4j_Math_28/defects4j_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java /tmp/fixed/defects4j_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
--- /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_28/defects4j_Math_28/defects4j_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2021-09-03 18:34:40.600175757 +0800
+++ /tmp/fixed/defects4j_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2021-09-03 18:35:03.142631286 +0800
@@ -116,6 +116,7 @@
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
             // 1. check if there's an artificial variable that can be forced out of the basis
+            if (tableau.getNumArtificialVariables() > 0) {
                 for (Integer row : minRatioPositions) {
                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
                         int column = i + tableau.getArtificialVariableOffset();
@@ -125,6 +126,7 @@
                         }
                     }
                 }
+            }
 
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
@@ -135,6 +137,7 @@
             // Additional heuristic: if we did not get a solution after half of maxIterations
             //                       revert to the simple case of just returning the top-most row
             // This heuristic is based on empirical data gathered while investigating MATH-828.
+            if (getIterations() < getMaxIterations() / 2) {
                 Integer minRow = null;
                 int minIndex = tableau.getWidth();
                 for (Integer row : minRatioPositions) {
@@ -149,6 +152,7 @@
                     }
                 }
                 return minRow;
+            }
         }
         return minRatioPositions.get(0);
     }


                
                ====================== simfix_1 Math_28 ================================
                
                [PATCH 38] file: /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_28/defects4j_Math_28/defects4j_Math_28/src/main/java//org/apache/commons/math3/optimization/linear/SimplexSolver.java, range: <123,125>, original: if(Precision.equals(entry,1.0,maxUlps)&&row.equals(tableau.getBasicRow(column))){
return row;
}
, patch: if(Precision.equals(minRatio,0.0)&&row.equals(tableau.getBasicRow(column))){
return row;
}


                
                ====================== simfix_2 Math_28 ================================
                
                [PATCH 38] file: /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_28/defects4j_Math_28/defects4j_Math_28/src/main/java//org/apache/commons/math3/optimization/linear/SimplexSolver.java, range: <123,125>, original: if(Precision.equals(entry,1.0,maxUlps)&&row.equals(tableau.getBasicRow(column))){
return row;
}
, patch: if(Precision.equals(minRatio,0.0)&&row.equals(tableau.getBasicRow(column))){
return row;
}


                
                ====================== simfix_3 Math_28 ================================
                
                 file: /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_28/defects4j_Math_28/defects4j_Math_28/src/main/java//org/apache/commons/math3/optimization/linear/SimplexSolver.java, range: <123,125>, original: if(Precision.equals(entry,1.0,maxUlps)&&row.equals(tableau.getBasicRow(column))){
return row;
}
, patch: if(Precision.equals(minRatio,0.0)&&row.equals(tableau.getBasicRow(column))){
return row;
}


                
                ====================== tbar_1 Math_28 ================================
                
                [PATCH 139]//**********************************************************
//org/apache/commons/math3/optimization/linear/SimplexSolver.java ------ 141
//**********************************************************
===Buggy Code===
int i = tableau.getNumObjectiveFunctions();

===Patch Code===
int i = tableau.getNumSlackVariables();


                
                ====================== tbar_2 Math_28 ================================
                
                [PATCH 139]//**********************************************************
//org/apache/commons/math3/optimization/linear/SimplexSolver.java ------ 141
//**********************************************************
===Buggy Code===
int i = tableau.getNumObjectiveFunctions();

===Patch Code===
int i = tableau.getNumSlackVariables();


                