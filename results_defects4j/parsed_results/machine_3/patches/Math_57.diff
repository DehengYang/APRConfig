
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_57/defects4j_Math_57/defects4j_Math_57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java /tmp/fixed/defects4j_Math_57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
--- /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_57/defects4j_Math_57/defects4j_Math_57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	2021-09-08 00:39:24.262347854 +0800
+++ /tmp/fixed/defects4j_Math_57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java	2021-09-08 00:39:42.090804872 +0800
@@ -172,7 +172,7 @@
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            double sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);


                
                ====================== dynamoth_2 Math_57 ================================
                
                --- a/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java
+++ b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java
@@ -85,3 +85,5 @@
if (point[i] != otherPoint[i]) {
-                return false;
+                if (otherPoint.length != 1) {
+                    return false;
+                }
}




                
                ====================== dynamoth_3 Math_57 ================================
                
                --- a/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java
+++ b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java
@@ -85,3 +85,5 @@
if (point[i] != otherPoint[i]) {
-                return false;
+                if (otherPoint.length != 1) {
+                    return false;
+                }
}




                