
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Chart_13/defects4j_Chart_13/defects4j_Chart_13/source/org/jfree/chart/block/BorderArrangement.java /tmp/fixed/defects4j_Chart_13/source/org/jfree/chart/block/BorderArrangement.java
--- /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Chart_13/defects4j_Chart_13/defects4j_Chart_13/source/org/jfree/chart/block/BorderArrangement.java	2021-08-25 08:47:52.287784919 +0800
+++ /tmp/fixed/defects4j_Chart_13/source/org/jfree/chart/block/BorderArrangement.java	2021-08-25 08:48:05.756339416 +0800
@@ -452,7 +452,7 @@
         h[3] = h[2];
         if (this.rightBlock != null) {
             RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                    new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);


                
                ====================== dynamoth_1 Chart_13 ================================
                
                --- a/source/org/jfree/chart/block/BorderArrangement.java
+++ b/source/org/jfree/chart/block/BorderArrangement.java
@@ -443,9 +443,11 @@
h[2] = constraint.getHeight() - h[1] - h[0];
-        if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        if (false) {
+            if (this.leftBlock != null) {
+                RectangleConstraint c3 = new RectangleConstraint(0.0,
+                new Range(0.0, constraint.getWidth()),
+                LengthConstraintType.RANGE, h[2], null,
+                LengthConstraintType.FIXED);
+                Size2D size = this.leftBlock.arrange(g2, c3);
+                w[2] = size.width;
+            }
}




                
                ====================== nopol_1 Chart_13 ================================
                
                --- a/source/org/jfree/chart/block/BorderArrangement.java
+++ b/source/org/jfree/chart/block/BorderArrangement.java
@@ -443,9 +443,11 @@
h[2] = constraint.getHeight() - h[1] - h[0];
-        if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
-            Size2D size = this.leftBlock.arrange(g2, c3);
-            w[2] = size.width;
+        if (null!=null) {
+            if (this.leftBlock != null) {
+                RectangleConstraint c3 = new RectangleConstraint(0.0,
+                new Range(0.0, constraint.getWidth()),
+                LengthConstraintType.RANGE, h[2], null,
+                LengthConstraintType.FIXED);
+                Size2D size = this.leftBlock.arrange(g2, c3);
+                w[2] = size.width;
+            }
}




                
                ====================== tbar_1 Chart_13 ================================
                
                [PATCH 214]//**********************************************************
//org/jfree/chart/block/BorderArrangement.java ------ 151
//**********************************************************
===Buggy Code===
if (h == LengthConstraintType.FIXED) {
                contentSize = arrangeFF(container, g2, constraint);
            }
            else if (h == LengthConstraintType.RANGE) {
                contentSize = arrangeFR(container, g2, constraint);
            }

===Patch Code===
clear();
	if (h == LengthConstraintType.FIXED) {
                contentSize = arrangeFF(container, g2, constraint);
            }
            else if (h == LengthConstraintType.RANGE) {
                contentSize = arrangeFR(container, g2, constraint);
            }


                
                ====================== tbar_2 Chart_13 ================================
                
                [PATCH 214]//**********************************************************
//org/jfree/chart/block/BorderArrangement.java ------ 151
//**********************************************************
===Buggy Code===
if (h == LengthConstraintType.FIXED) {
                contentSize = arrangeFF(container, g2, constraint);
            }
            else if (h == LengthConstraintType.RANGE) {
                contentSize = arrangeFR(container, g2, constraint);
            }

===Patch Code===
clear();
	if (h == LengthConstraintType.FIXED) {
                contentSize = arrangeFF(container, g2, constraint);
            }
            else if (h == LengthConstraintType.RANGE) {
                contentSize = arrangeFR(container, g2, constraint);
            }


                
                ====================== tbar_3 Chart_13 ================================
                
                [PATCH 214]//**********************************************************
//org/jfree/chart/block/BorderArrangement.java ------ 151
//**********************************************************
===Buggy Code===
if (h == LengthConstraintType.FIXED) {
                contentSize = arrangeFF(container, g2, constraint);
            }
            else if (h == LengthConstraintType.RANGE) {
                contentSize = arrangeFR(container, g2, constraint);
            }

===Patch Code===
clear();
	if (h == LengthConstraintType.FIXED) {
                contentSize = arrangeFF(container, g2, constraint);
            }
            else if (h == LengthConstraintType.RANGE) {
                contentSize = arrangeFR(container, g2, constraint);
            }


                