
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Lang_13/defects4j_Lang_13/defects4j_Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java /tmp/fixed/defects4j_Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java
--- /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Lang_13/defects4j_Lang_13/defects4j_Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	2021-08-29 07:48:55.641041801 +0800
+++ /tmp/fixed/defects4j_Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	2021-08-29 07:49:08.781584054 +0800
@@ -236,6 +236,8 @@
      * class here is a workaround, see the JIRA issue LANG-626. </p>
      */
      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {
+        private static final Map<String, Class<?>> primitiveTypes = 
+                new HashMap<String, Class<?>>();
         private ClassLoader classLoader;
         
         /**
@@ -249,6 +251,15 @@
             super(in);
             this.classLoader = classLoader;
 
+            primitiveTypes.put("byte", byte.class);
+            primitiveTypes.put("short", short.class);
+            primitiveTypes.put("int", int.class);
+            primitiveTypes.put("long", long.class);
+            primitiveTypes.put("float", float.class);
+            primitiveTypes.put("double", double.class);
+            primitiveTypes.put("boolean", boolean.class);
+            primitiveTypes.put("char", char.class);
+            primitiveTypes.put("void", void.class);
         }
 
         /**
@@ -265,7 +276,15 @@
             try {
                 return Class.forName(name, false, classLoader);
             } catch (ClassNotFoundException ex) {
+                try {
                     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
+                } catch (ClassNotFoundException cnfe) {
+                    Class<?> cls = primitiveTypes.get(name);
+                    if (cls != null)
+                        return cls;
+                    else
+                        throw cnfe;
+                }
             }
         }
 


                
                ====================== tbar_1 Lang_13 ================================
                
                [PATCH 33]//**********************************************************
//org/apache/commons/lang3/SerializationUtils.java ------ 267
//**********************************************************
===Buggy Code===
/**
         * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>
         * of the current <code>Thread</code> to resolve the class.
         * @param desc An instance of class <code>ObjectStreamClass</code>.
         * @return A <code>Class</code> object corresponding to <code>desc</code>.
         * @throws IOException Any of the usual Input/Output exceptions.
         * @throws ClassNotFoundException If class of a serialized object cannot be found.
         */
        @Override
        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
            String name = desc.getName();
            try {
                return Class.forName(name, false, classLoader);
            } catch (ClassNotFoundException ex) {
                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
            }
        }

===Patch Code===



                
                ====================== tbar_2 Lang_13 ================================
                
                [PATCH 33]//**********************************************************
//org/apache/commons/lang3/SerializationUtils.java ------ 267
//**********************************************************
===Buggy Code===
/**
         * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>
         * of the current <code>Thread</code> to resolve the class.
         * @param desc An instance of class <code>ObjectStreamClass</code>.
         * @return A <code>Class</code> object corresponding to <code>desc</code>.
         * @throws IOException Any of the usual Input/Output exceptions.
         * @throws ClassNotFoundException If class of a serialized object cannot be found.
         */
        @Override
        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
            String name = desc.getName();
            try {
                return Class.forName(name, false, classLoader);
            } catch (ClassNotFoundException ex) {
                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
            }
        }

===Patch Code===



                
                ====================== tbar_3 Lang_13 ================================
                
                [PATCH 33]//**********************************************************
//org/apache/commons/lang3/SerializationUtils.java ------ 267
//**********************************************************
===Buggy Code===
/**
         * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>
         * of the current <code>Thread</code> to resolve the class.
         * @param desc An instance of class <code>ObjectStreamClass</code>.
         * @return A <code>Class</code> object corresponding to <code>desc</code>.
         * @throws IOException Any of the usual Input/Output exceptions.
         * @throws ClassNotFoundException If class of a serialized object cannot be found.
         */
        @Override
        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
            String name = desc.getName();
            try {
                return Class.forName(name, false, classLoader);
            } catch (ClassNotFoundException ex) {
                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
            }
        }

===Patch Code===



                