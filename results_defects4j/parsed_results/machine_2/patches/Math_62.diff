
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_62/defects4j_Math_62/defects4j_Math_62/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java /tmp/fixed/defects4j_Math_62/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java
--- /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_62/defects4j_Math_62/defects4j_Math_62/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java	2021-08-27 14:12:08.281190937 +0800
+++ /tmp/fixed/defects4j_Math_62/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java	2021-08-27 14:12:28.149901650 +0800
@@ -143,7 +143,7 @@
                                                  final GoalType goal,
                                                  final double min, final double max)
         throws FunctionEvaluationException {
-        return optimize(f, goal, min, max, 0);
+        return optimize(f, goal, min, max, min + 0.5 * (max - min));
     }
 
     /** {@inheritDoc} */
@@ -157,9 +157,8 @@
         // Multi-start loop.
         for (int i = 0; i < starts; ++i) {
             try {
-                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
-                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
-                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
+                final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);
+                optima[i] = optimizer.optimize(f, goal, min, max, s);
             } catch (FunctionEvaluationException fee) {
                 optima[i] = null;
             } catch (ConvergenceException ce) {


                
                ====================== simfix_2 Math_62 ================================
                
                [PATCH 1474] file: /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Math_62/defects4j_Math_62/defects4j_Math_62/src/main/java//org/apache/commons/math/optimization/univariate/BrentOptimizer.java, range: <206,212>, original: if(u<x){
b=x;
}else {
a=x;
}
v=w;
fv=fw;
, patch: a-=fw;
b-=w;
if(u<x){
b=x;
}else {
a=x;
}
v=w;
fv=fw;


                
                ====================== tbar_1 Math_62 ================================
                
                [PATCH 236]//**********************************************************
//org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java ------ 162
//**********************************************************
===Buggy Code===
optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));

===Patch Code===
optima[i] = optimizer.optimize(f, goal, FastMath.min(min, bound2), FastMath.max(bound1, bound2));


                
                ====================== tbar_2 Math_62 ================================
                
                [PATCH 236]//**********************************************************
//org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java ------ 162
//**********************************************************
===Buggy Code===
optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));

===Patch Code===
optima[i] = optimizer.optimize(f, goal, FastMath.min(min, bound2), FastMath.max(bound1, bound2));


                
                ====================== tbar_3 Math_62 ================================
                
                [PATCH 236]//**********************************************************
//org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java ------ 162
//**********************************************************
===Buggy Code===
optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));

===Patch Code===
optima[i] = optimizer.optimize(f, goal, FastMath.min(min, bound2), FastMath.max(bound1, bound2));


                