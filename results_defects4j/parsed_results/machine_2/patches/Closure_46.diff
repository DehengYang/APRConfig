
                ====================== human-written patch ================================
                
                diff -Naur /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Closure_46/defects4j_Closure_46/defects4j_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java /tmp/fixed/defects4j_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java
--- /mnt/data/bias_validation_2021/execution_framework/../results_defects4j/defects4j_Closure_46/defects4j_Closure_46/defects4j_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java	2021-09-05 18:14:49.385868817 +0800
+++ /tmp/fixed/defects4j_Closure_46/src/com/google/javascript/rhino/jstype/RecordType.java	2021-09-05 18:15:05.426418241 +0800
@@ -137,22 +137,6 @@
         propertyNode);
   }
 
-  @Override
-  public JSType getLeastSupertype(JSType that) {
-    if (!that.isRecordType()) {
-      return super.getLeastSupertype(that);
-    }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
-      }
-    }
-    return builder.build();
-  }
   JSType getGreatestSubtypeHelper(JSType that) {
     if (that.isRecordType()) {
       RecordType thatRecord = that.toMaybeRecordType();


                
                ====================== tbar_1 Closure_46 ================================
                
                [PATCH 548]//**********************************************************
//com/google/javascript/rhino/jstype/RecordType.java ------ 145
//**********************************************************
===Buggy Code===
@Override
  public JSType getLeastSupertype(JSType that) {
    if (!that.isRecordType()) {
      return super.getLeastSupertype(that);
    }
    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
    for (String property : properties.keySet()) {
      if (that.toMaybeRecordType().hasProperty(property) &&
          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
              getPropertyType(property))) {
        builder.addProperty(property, getPropertyType(property),
            getPropertyNode(property));
      }
    }
    return builder.build();
  }

===Patch Code===



                
                ====================== tbar_2 Closure_46 ================================
                
                [PATCH 548]//**********************************************************
//com/google/javascript/rhino/jstype/RecordType.java ------ 145
//**********************************************************
===Buggy Code===
@Override
  public JSType getLeastSupertype(JSType that) {
    if (!that.isRecordType()) {
      return super.getLeastSupertype(that);
    }
    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
    for (String property : properties.keySet()) {
      if (that.toMaybeRecordType().hasProperty(property) &&
          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
              getPropertyType(property))) {
        builder.addProperty(property, getPropertyType(property),
            getPropertyNode(property));
      }
    }
    return builder.build();
  }

===Patch Code===



                
                ====================== tbar_3 Closure_46 ================================
                
                //**********************************************************
//com/google/javascript/rhino/jstype/RecordType.java ------ 145
//**********************************************************
===Buggy Code===
@Override
  public JSType getLeastSupertype(JSType that) {
    if (!that.isRecordType()) {
      return super.getLeastSupertype(that);
    }
    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
    for (String property : properties.keySet()) {
      if (that.toMaybeRecordType().hasProperty(property) &&
          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
              getPropertyType(property))) {
        builder.addProperty(property, getPropertyType(property),
            getPropertyNode(property));
      }
    }
    return builder.build();
  }

===Patch Code===



                